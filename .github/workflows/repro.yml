name: Bitcoin Binaries Reproducible Builds
on:
  push:
    paths-ignore:
    # Changes to these artifacts are autogenerated by this workflow
    # ignore them to prevent an infinite CI loop
    - '*/*.webm'
    - 'index.html'
jobs:
  reproBuild:
    runs-on: ubuntu-latest
    env:
      DISPLAY: ":0"
      RESOLUTION: "490x330"
      FRAMERATE: 12
    continue-on-error: true
    strategy:
      matrix:
        # Working: coldcard, lnd, bitcoin-core, mycelium-android, zap-android, simple-bitcoin-wallet, wasabi, sparrow, blockstream-green
        # WIP: trezor-firmware 
        project: [coldcard, coldcard-mk3, lnd, bitcoin-core, mycelium-android, zap-android, simple-bitcoin-wallet, wasabi, sparrow, blockstream-green, fulcrum, electrs, cln, poncho, bitbox02-firmware]
    steps:
      - name: Setup xvfb for video capture
        run: |
          sudo apt update -y
          sudo apt install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0 xterm xfonts-base
          # start xvfb in the background
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 "${RESOLUTION}x24" &

      - name: Setup ffmpeg for video capture
        run: |
          sudo apt install -y ffmpeg

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install ARM toolchain
        if: ${{ matrix.project == 'coldcard' || matrix.project == 'coldcard-mk3' || matrix.project == 'trezor-firmware'}}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: 'latest'

      - name: Setup Java 17 (for Sparrow and Poncho)
        if: ${{ matrix.project == 'sparrow' || matrix.project == 'poncho' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.0.2'

      - name: Setup Go (for lnd)
        if: ${{ matrix.project == 'lnd' }}
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'

      - name: Setup deps for BitBox02 firmware
        if: ${{ matrix.project == 'bitbox02-firmware' }}
        uses: docker/setup-buildx-action@v2

      - name: Setup deps for Bitcoin Core
        if: ${{ matrix.project == 'bitcoin-core' }}
        run: |
          sudo apt install -y libboost-dev libevent-dev build-essential libtool autotools-dev automake pkg-config bsdmainutils python3

      - name: Setup deps for electrs
        if: ${{ matrix.project == 'electrs' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup deps for Trezor (1/2)
        if: ${{ matrix.project == 'trezor-firmware' }}
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.11

      - name: Setup deps for Trezor (2/2) 
        if: ${{ matrix.project == 'trezor-firmware' }}
        run: |
          sudo apt install -y protobuf-compiler libsdl2-dev

      - name: Setup Java 16 (for Zap, Blockstream)
        if: ${{ matrix.project == 'zap-android' || matrix.project == 'blockstream-green' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '16'

      - name: Setup Java 8 (for Simple Bitcoin Wallet, Mycelium)
        if: ${{ matrix.project == 'simple-bitcoin-wallet' || matrix.project == 'mycelium-android' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Setup Dotnet (for Wasabi)
        if: ${{ matrix.project == 'wasabi' }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Setup deps for Fulcrum SPV server
        if: ${{ matrix.project == 'fulcrum' }}
        run: |
          sudo apt install -y openssl git build-essential pkg-config zlib1g-dev libbz2-dev libjemalloc-dev libzmq3-dev qtbase5-dev qt5-qmake

      - name: Setup deps for Core Lightning
        if: ${{ matrix.project == 'cln' }}
        run: |
          sudo apt install -y autoconf automake build-essential ca-certificates curl dirmngr gettext gnupg libpq-dev libtool libffi-dev python3 python3-dev python3-mako python3-pip python3-venv python3-setuptools wget zlib1g libgmp-dev unzip tclsh rustc

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup deps for Poncho
        if: ${{ matrix.project == 'poncho' }}
        run: |
          sudo apt install -y libuv1-dev
          git clone https://github.com/bitcoin-core/secp256k1 && cd secp256k1 && ./autogen.sh && ./configure --enable-module-schnorrsig --enable-module-recovery && make && sudo make install

      - name: Run ${{ matrix.project }} build
        env:
          PROJECT: ${{ matrix.project }}
        run: |
          REPO_ROOT_DIR=`pwd`
          cd ${PROJECT}
          VERSION=`perl -ne 'print "$1\n" if /^VERSION="?([^"]*)"?$/' artifacts.sh`
          # Only run if the project and version have not already been included
          if ! grep -q -i "${PROJECT}.*${VERSION}.*build bot" ../index.html ; then
            ffmpeg -nostats -y -video_size $RESOLUTION -framerate ${FRAMERATE} -f x11grab -i $DISPLAY ${PROJECT}-${VERSION}-video-original.webm &
            xterm -display $DISPLAY -e "cd ${REPO_ROOT_DIR}/${PROJECT} && ./steps.sh 2>&1 | tee log.out"
            # wait for steps to run
            pkill -f ffmpeg

            # Speed up video by shortening sections where terminal is not moving (keep 1 second).
            python ../helper_scripts/speedup_video.py -i ${PROJECT}-${VERSION}-video-original.webm -o ${PROJECT}-${VERSION}-video.webm -t 1 -k 1

            # Convert video to mp4 for Twitter upload.
            # Also check the duration - might need to speed up further if still too long for Twitter.
            # Duration check doesn't seem to work on .webm file (returns N/A), hence converting the full length first.
            ffmpeg -nostats -y -i ${PROJECT}-${VERSION}-video.webm -movflags faststart -pix_fmt yuv420p ${PROJECT}-${VERSION}-video.mp4
            ORIGINAL_DURATION=$(ffprobe -i ${PROJECT}-${VERSION}-video.mp4 -show_entries format=duration -v quiet -of csv="p=0")
            # Convert to integer format, so bash can do arithmetic
            ORIGINAL_DURATION=$(echo $ORIGINAL_DURATION | sed -e 's/\.[0-9]*//')

            if (( $ORIGINAL_DURATION > 140 )); then
                mv ${PROJECT}-${VERSION}-video.mp4 ${PROJECT}-${VERSION}-video-original.mp4
                echo "Original video is longer than 140 seconds, so we will speed it up for Twitter."
                ffmpeg -nostats -y -i ${PROJECT}-${VERSION}-video-original.mp4 -movflags faststart -pix_fmt yuv420p -filter:v "setpts=(139/${ORIGINAL_DURATION})*PTS" ${PROJECT}-${VERSION}-video.mp4
            fi

            ./artifacts.sh >> ${PROJECT}-output.txt
            cat log.out

            # Create a txt file artifact that forms part of the tweet composed in reproTweet step.
            TWITTER_NAME=`perl -ne 'print "$1\n" if /^TWITTER_NAME="?([^"]*)"?$/' artifacts.sh`
            if [ ! -z "$TWITTER_NAME" ]; then
                echo "${TWITTER_NAME} ${VERSION}" > "${PROJECT}-${VERSION}-tweet-entry.txt"
            fi
          fi ;

      - name: Stage ${{ matrix.project }} artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}
          path: |
            ${{ matrix.project }}/${{ matrix.project }}*-video.webm
            ${{ matrix.project }}/${{ matrix.project }}*-video.mp4
            ${{ matrix.project }}/${{ matrix.project }}-output.txt
            ${{ matrix.project }}/${{ matrix.project }}*-tweet-entry.txt

  reproCommit:
    needs:
      - reproBuild
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Gather artifacts from jobs
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Commit updates
        run: |
          PATTERN="artifacts/*/*output.txt"

          # Run only if any artifacts were found
          if ls $PATTERN 1> /dev/null 2>&1; then
              # Append each new output line to the HTML table
              for o in `ls artifacts/*/*output.txt` ; do
                TEXT=`cat ${o}` ;
                perl -pi -e "s+^<ul class=\"log\">$+<ul class=\"log\">\n     ${TEXT}+" index.html ;
              done

              # Check in each new video artifact
              for dir in `ls -d artifacts/*` ; do
                p=`echo ${dir} | cut -f 2 -d '/'`
                mv artifacts/${p}/${p}*-video.webm ${p}/ ;
                git add ${p}/*-video.webm ;
              done

              git add index.html
              git config --local user.email 'action@github.com'
              git config --local user.name 'GitHub Action'
              git commit -m 'Add latest build artifacts'
          else
              echo "No new artifacts to commit"
          fi

      - name: Push updates
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  reproTweet:
    needs:
      - reproCommit
    runs-on: ubuntu-latest
    env:
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Gather artifacts from jobs
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Tweet about new builds
        working-directory: twitter_bot
        run: |
          PATTERN="../artifacts/*/*tweet-entry.txt"

          if ls $PATTERN 1> /dev/null 2>&1; then
              pip install -q -r requirements.txt

              for t in `ls $PATTERN` ; do
                PROJECT=$(echo "$t" | sed -e 's/..\/artifacts\///g' -e 's/\/.*//g')
                VERSION=$(perl -ne 'print "$1\n" if /^VERSION="?([^"]*)"?$/' "../${PROJECT}/artifacts.sh")

                MP4_VIDEO_FILENAME="${t/tweet-entry.txt/video.mp4}"
                WEBM_VIDEO_URL="https://github.com/${GITHUB_REPOSITORY}/raw/${GITHUB_REF_NAME}/${PROJECT}/${PROJECT}-${VERSION}-video.webm"
                
                printf "New successful build on bitcoinbinary.org!\n\n" > tweet.txt
                printf "`cat ${t}`\n\n" >> tweet.txt
                printf "Original video proof: $WEBM_VIDEO_URL\n" >> tweet.txt

                echo
                echo "Tweeting the following:"
                echo "---------------------------------"
                cat tweet.txt
                echo "---------------------------------"
                echo

                python send_tweet.py tweet.txt $MP4_VIDEO_FILENAME $WEBM_VIDEO_URL
              done
          else
              echo "No new successful builds to tweet (or TWITTER_NAME not set in artifacts.sh)."
          fi
